package userInteraction;

import collection.baseClasses.Coordinates;
import collection.baseClasses.MusicGenre;
import collection.baseClasses.Person;
import exeptions.NoKeyExeptions;
import exeptions.WrongInputFormat;
import exeptions.NullFieldExeption;
import userInteraction.input.InputHandler;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * check the input - a class that handles console input
 */
public class CTInput {
    public boolean checkKey(String key){
        try{
            Integer a = Integer.valueOf(key);
            if(a > 0){
                return true;
            }
            else{
                System.out.println("–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è");
                return false;
            }
        }
        catch (NumberFormatException ex){
            System.out.println("–ó–∞–¥–∞–π—Ç–µ –∫–ª—é—á —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º!");
            return false;
        }
    }
    //–ó–ê–ú–ï–ù–ò–¢–¨!!!
    public Long lowCompareKey(InputHandler t2, Integer oldKey){
        while(true){
            try{
                String[] in = t2.read();
                if(in.length == 0) throw new NoKeyExeptions();
                if(!checkKey(in[0])) return null;
                Long key = Long.valueOf(in[0]);
                if(key < oldKey){
                    System.out.println("–ö–ª—é—á —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—é.\n–†–∞–∑—Ä–µ—à–µ–Ω –≤–≤–æ–¥ –ø–æ–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–ª–µ–∫—Ü–∏–∏.\n");
                    return key;
                }
                else{
                    System.out.println("–í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–ª—é—á –Ω–µ –º–µ–Ω—å—à–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ. –ó–∞–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
                    return null;
                }
            }
            catch (NoKeyExeptions e){
                System.out.println("–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–ª—é—á!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:");
            }
            catch(NumberFormatException e){
                System.out.println("–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:");
            }
        }
    }

    public String setName(InputHandler t2){
        while(true){
            System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞: ");
            String[] name = t2.read();
            try {
                if (name.length==0) throw new NullFieldExeption();
                StringBuilder finalName = new StringBuilder();
                for (String str: name) {
                    finalName.append(str);
                }
                return finalName.toString();
            }
            catch (NullFieldExeption ex){
                System.out.println("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º");
            }
        }
    }

    public Coordinates setCoordinates(InputHandler t2) {
        Coordinates coord = new Coordinates();
        String[] numb;
        while (true) {
            System.out.println("–ó–∞–¥–∞–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –•");
            numb = t2.read();
            try {
                if (numb.length == 0) throw new NullFieldExeption();
                if (numb.length > 2) throw new NumberFormatException();
                int x = Integer.parseInt(numb[0]);
                if (x < -123) throw new WrongInputFormat();
                coord.setX(x);
                break;
            } catch (NullFieldExeption e) {
                System.out.println("–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
            } catch (NumberFormatException e) {
                System.out.println("–ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º —Ç–∏–ø–∞ int");
            } catch (WrongInputFormat e) {
                System.out.println("–ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ -123");
            }

        }
        while (true) {
            System.out.println("–ó–∞–¥–∞–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É Y");
            numb = t2.read();
            try {
                if (numb.length == 0) throw new NullFieldExeption();
                if (numb.length > 2) throw new NumberFormatException();
                float y = Float.parseFloat(numb[0]);
                coord.setY(y);
                break;
            } catch (NullFieldExeption e) {
                System.out.println("–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
            } catch (NumberFormatException e) {
                System.out.println("–ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º —Ç–∏–ø–∞ float");
            }
        }
        return coord;
    }

    /**
     * Set NumberOfParticipants
     */
    public Long setNOP(InputHandler t2){
        String[] numb;
        while (true){
            System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞");
            numb = t2.read();
            try{
                if(numb.length > 1) throw new WrongInputFormat();
                if(numb.length == 0) return null;
                long num = Long.parseLong(numb[0]);
                if(num < 0) throw new WrongInputFormat();
                return num;
            }
            catch (WrongInputFormat | NumberFormatException e){
                System.out.println("–ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º —Ç–∏–ø–∞ long, –±–æ–ª—å—à–∏–º 0");
            }
        }
    }

    /**
     * set musicGenre
     */
    public MusicGenre setMG(InputHandler t2){
        String[] genre;
        while(true){
            System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –≤–∞—à–µ–≥–æ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞");
            MusicGenre[] n = MusicGenre.values();
            for (MusicGenre s:
                    n) {
                System.out.println(s);
            }
            genre = t2.read();
            try{
                if(genre.length > 1) throw new WrongInputFormat();
                if(genre.length == 0) return null;
                MusicGenre fgen = MusicGenre.valueOf(genre[0]);
                return fgen;
            }
            catch (WrongInputFormat| IllegalArgumentException e){
                System.out.println("–¢–∞–∫–æ–≥–æ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ç–∏–≤ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö");
            }
        }
    }

    /**
     * gradually fill in each field about the frontman
     * @param t2 is the user input
     * @return
     */
    public Person personality(InputHandler t2, String passID){
        String[] allIn;
        Person person = new Person();

        //name
        while(true){
            System.out.println("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–æ–∫–∞–ª–∏—Å—Ç–∞");
            allIn = t2.read();
            try{
                if(allIn.length == 0) throw new WrongInputFormat();
                StringBuilder name = new StringBuilder();
                for (String e: allIn) {
                    name.append(e);
                    name.append(" ");
                }
                person.setName(name.toString());
                break;
            }
            catch (WrongInputFormat e){
                System.out.println("–ò–º—è –≤–æ–∫–∞–ª–∏—Å—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π");
            }
        }

        //set birthday
        while(true){
            System.out.println("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤–æ–∫–∞–ª–∏—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–º.–¥–¥.–≥–≥–≥–≥");
            allIn = t2.read();
            DateFormat df = new SimpleDateFormat("MM.dd.yyyy");
            try{
                Date startDate = df.parse(allIn[0]);
                person.setBirthday(startDate);
                break;
            }
            catch (ParseException e){
                System.out.println("–ì–ª—É–ø—ã—à–∫–∞, —Ç—ã –Ω–∞—Ä—É—à–∏–ª —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑üòä");
            }
        }

        //set height
        while (true){
            System.out.println("–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç –≤–æ–∫–∞–ª–∏—Å—Ç–∞");
            allIn = t2.read();
            try{
                if(allIn.length == 0){
                    person.setHeight(null);
                    break;
                }
                Float hght = Float.valueOf(allIn[0]);
                person.setHeight(hght);
                break;
            }
            catch (NumberFormatException e){
                System.out.println("–†–æ—Å—Ç –≤–æ–∫–∞–ª–∏—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º —Ç–∏–ø–∞ Float");
            }
        }

        //set weight
        while (true){
            System.out.println("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤–æ–∫–∞–ª–∏—Å—Ç–∞");
            allIn = t2.read();
            try {
                if (allIn.length == 0) throw new NullFieldExeption();
                int wght = Integer.parseInt(allIn[0]);
                if(wght < 0) throw new WrongInputFormat();
                person.setWeight(wght);
                break;
            }
            catch (NullFieldExeption e){
                System.out.println("–í–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º");
            }
            catch (NumberFormatException e){
                System.out.println("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º");
            }
            catch (WrongInputFormat e){
                System.out.println("–í–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º");
            }
        }

        //set passportID
        person.setPassportID(passID);

        return person;
    }
}
